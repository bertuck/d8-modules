diff --git a/config/schema/embed.schema.yml b/config/schema/embed.schema.yml
index e232a20..f6d45dd 100644
--- a/config/schema/embed.schema.yml
+++ b/config/schema/embed.schema.yml
@@ -26,9 +26,15 @@ embed.button.*:
       label: 'Embed type plugin ID'
     type_settings:
       type: embed.embed_type_settings.[%parent.type_id]
+    icon_location:
+      type: string
+      label: 'Button icon location'
     icon_uuid:
       type: string
       label: 'Button icon UUID'
+    icon_path:
+      type: string
+      label: 'Button icon path'

 embed.embed_type_settings.*:
   type: mapping
diff --git a/embed.install b/embed.install
new file mode 100644
index 0000000..ad531f6
--- /dev/null
+++ b/embed.install
@@ -0,0 +1,23 @@
+<?php
+
+/**
+ * Update config for embed buttons.
+ */
+function embed_update_8001() {
+  $config_factory = \Drupal::configFactory();
+
+  foreach ($config_factory->listAll('embed.button.') as $embed_button_config_name) {
+    /* @var \Drupal\embed\EmbedButtonInterface $embed_button */
+    $embed_button = $config_factory->getEditable($embed_button_config_name);
+
+    if (!$embed_button->get('icon_location')) {
+      $embed_button->set('icon_location', 'file');
+    }
+
+    if (!$embed_button->get('icon_path')) {
+      $embed_button->set('icon_path', NULL);
+    }
+
+    $embed_button->save();
+  }
+}
diff --git a/src/EmbedButtonInterface.php b/src/EmbedButtonInterface.php
index 6a2d570..5a6fc9d 100644
--- a/src/EmbedButtonInterface.php
+++ b/src/EmbedButtonInterface.php
@@ -54,6 +54,14 @@ interface EmbedButtonInterface extends ConfigEntityInterface {
    */
   public function getTypeSettings();

+  /**
+   * Returns the button's icon location type.
+   *
+   * @return string|null
+   *   The button's icon location type (eg, file or path).
+   */
+  public function getIconLocation();
+
   /**
    * Returns the button's icon file.
    *
@@ -62,6 +70,14 @@ interface EmbedButtonInterface extends ConfigEntityInterface {
    */
   public function getIconFile();

+  /**
+   * Returns the button's icon file path.
+   *
+   * @return string|null
+   *   The file path of the button icon.
+   */
+  public function getIconPath();
+
   /**
    * Returns the URL of the button's icon.
    *
diff --git a/src/Entity/EmbedButton.php b/src/Entity/EmbedButton.php
index 9188b95..51812e0 100644
--- a/src/Entity/EmbedButton.php
+++ b/src/Entity/EmbedButton.php
@@ -37,7 +37,9 @@ use Drupal\embed\EmbedButtonInterface;
  *     "id",
  *     "type_id",
  *     "type_settings",
+ *     "icon_location",
  *     "icon_uuid",
+ *     "icon_path",
  *   }
  * )
  */
@@ -75,6 +77,13 @@ class EmbedButton extends ConfigEntityBase implements EmbedButtonInterface {
    */
   public $type_settings = [];

+  /**
+   * Icon location.
+   *
+   * @var string
+   */
+  public $icon_location;
+
   /**
    * UUID of the button's icon file.
    *
@@ -82,6 +91,13 @@ class EmbedButton extends ConfigEntityBase implements EmbedButtonInterface {
    */
   public $icon_uuid;

+  /**
+   * Path to the button's icon file.
+   *
+   * @var string
+   */
+  public $icon_path;
+
   /**
    * {@inheritdoc}
    */
@@ -110,6 +126,13 @@ class EmbedButton extends ConfigEntityBase implements EmbedButtonInterface {
     }
   }

+  /**
+   * {@inheritdoc}
+   */
+  public function getIconLocation() {
+    return $this->icon_location;
+  }
+
   /**
    * {@inheritdoc}
    */
@@ -119,16 +142,31 @@ class EmbedButton extends ConfigEntityBase implements EmbedButtonInterface {
     }
   }

+  /**
+   * {@inheritdoc}
+   */
+  public function getIconPath() {
+    return $this->icon_path;
+  }
+
   /**
    * {@inheritdoc}
    */
   public function getIconUrl() {
-    if ($image = $this->getIconFile()) {
-      return file_create_url($image->getFileUri());
-    }
-    else {
-      return $this->getTypePlugin()->getDefaultIconUrl();
+    switch ($this->icon_location) {
+      case 'path':
+        if (!empty($this->icon_path)) {
+          return file_create_url($this->icon_path);
+        }
+        break;
+
+      case 'file':
+        if ($image = $this->getIconFile()) {
+          return file_create_url($image->getFileUri());
+        }
+        break;
     }
+    return $this->getTypePlugin()->getDefaultIconUrl();
   }

   /**
diff --git a/src/Form/EmbedButtonForm.php b/src/Form/EmbedButtonForm.php
index 2702e22..a56eab4 100644
--- a/src/Form/EmbedButtonForm.php
+++ b/src/Form/EmbedButtonForm.php
@@ -124,6 +124,18 @@ class EmbedButtonForm extends EntityForm {
       $form['type_id']['#disabled'] = FALSE;
     }

+    $icon_location = $button->getIconLocation();
+    $form['icon_location'] = [
+      '#title' => $this->t('Button icon location'),
+      '#type' => 'radios',
+      '#description' => $this->t('Whether you wish to upload an icon or specify a path to the icon'),
+      '#options' => [
+        'file' => $this->t('File upload'),
+        'path' => $this->t('Path to file'),
+      ],
+      '#default_value' => (!empty($icon_location) ? $icon_location : 'file'),
+    ];
+
     $config = $this->config('embed.settings');
     $upload_location = $config->get('file_scheme') . '://' . $config->get('upload_directory') . '/';
     $form['icon_file'] = [
@@ -135,11 +147,28 @@ class EmbedButtonForm extends EntityForm {
         'file_validate_extensions' => ['gif png jpg jpeg'],
         'file_validate_image_resolution' => ['32x32', '16x16'],
       ],
+      '#states' => [
+        'visible' => [
+          'input[name="icon_location"]' => ['value' => 'file'],
+        ],
+      ],
     ];
     if ($file = $button->getIconFile()) {
       $form['icon_file']['#default_value'] = ['target_id' => $file->id()];
     }

+    $form['icon_path'] = [
+      '#title' => $this->t('Button icon path'),
+      '#type' => 'textfield',
+      '#description' => $this->t('Icon path for the button to be shown in CKEditor toolbar. Enter a relative path such as "/core/modules/ckeditor/js/plugins/drupalimage/icons/drupalimage.png".'),
+      '#default_value' => $button->getIconPath(),
+      '#states' => [
+        'visible' => [
+          'input[name="icon_location"]' => ['value' => 'path'],
+        ],
+      ],
+    ];
+
     return $form;
   }

@@ -191,6 +220,15 @@ class EmbedButtonForm extends EntityForm {
       $button->set('icon_uuid', NULL);
     }

+    if ($icon_path = $form_state->getValue('icon_path')) {
+      $button->set('icon_path', $icon_path);
+    }
+    else {
+      $button->set('icon_path', NULL);
+    }
+
+    $button->set('icon_location', $form_state->getValue('icon_location'));
+
     $status = $button->save();

     $t_args = ['%label' => $button->label()];
diff --git a/src/Tests/EmbedButtonAdminTest.php b/src/Tests/EmbedButtonAdminTest.php
index f89a7b9..a8c759c 100644
--- a/src/Tests/EmbedButtonAdminTest.php
+++ b/src/Tests/EmbedButtonAdminTest.php
@@ -93,5 +93,4 @@ class EmbedButtonAdminTest extends EmbedTestBase {
     );
     $this->drupalPostForm(NULL, $edit, 'Save');
   }
-
 }
diff --git a/tests/src/Kernel/IconFileUsageTest.php b/tests/src/Kernel/IconFileUsageTest.php
index d815426..7b45611 100644
--- a/tests/src/Kernel/IconFileUsageTest.php
+++ b/tests/src/Kernel/IconFileUsageTest.php
@@ -31,6 +31,9 @@ class IconFileUsageTest extends KernelTestBase {
     $this->installEntitySchema('user');
     $this->installEntitySchema('file');
     $this->installEntitySchema('embed_button');
+    $this->config('file.settings')
+      ->set('make_unused_managed_files_temporary', TRUE)
+      ->save();

     $file1 = file_save_data(file_get_contents('core/misc/druplicon.png'));
     $file1->setTemporary();
@@ -40,14 +43,21 @@ class IconFileUsageTest extends KernelTestBase {
     $file2->setTemporary();
     $file2->save();

+    $example_icon_path = '/libraries/ckeditor/plugins/smiley/images/angel_smile.png';
+
     $button = [
       'id' => 'test_button',
       'label' => 'Testing embed button instance',
       'type_id' => 'embed_test_default',
-      'icon_uuid' => $file1->uuid(),
+      'icon_location' => 'path',
+      'icon_uuid' => NULL,
+      'icon_path' => $example_icon_path,
     ];

     $entity = EmbedButton::create($button);
+    $this->assertEquals($entity->getIconPath(), $example_icon_path);
+
+    $entity->icon_uuid = $file1->uuid();
     $entity->save();
     $this->assertTrue(File::load($file1->id())->isPermanent());
